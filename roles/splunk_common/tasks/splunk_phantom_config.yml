---
# Configure phantom app


# First retrieve the phantom host IP 
- set_fact:
    phantom_host: "{{ groups['phantom_servers'][0] }}"
  tags: phantom-app-config

# Get the automation user auth token

- name: Get Token of automation user
  uri:
    url: "https://{{ phantom_host }}/rest/ph_user/2/token"
    method: GET
    user: admin
    password: "{{ phantom_default_admin_pass }}"
    force_basic_auth: yes
    validate_certs: false
    status_code: 200
    timeout: 10
  ignore_errors: false
  register: phantom_auth_token
  tags: phantom-app-config
  

- debug:
    var=phantom_auth_token.json.key
  tags: phantom-app-config

# Store the token to construct curl command 

- lineinfile:
    path: "root_vars/ec2_image_vars.yml"
    regexp: '^phantom_auth_token:'
    line: 'phantom_auth_token: {{ phantom_auth_token.json.key }} #AUTO CHANGED'
  delegate_to: localhost
  tags: phantom-app-config

# Prerequisites on splunk admin should have relevant phantom permissions

- name: Assign phantom permissions to admin
  uri:
    url: "https://127.0.0.1:{{ splunk.svc_port }}/services/authentication/users/admin"
    method: POST
    user: admin
    password: "{{ splunk.password }}"
    body_format: form-urlencoded
    body:
    - [ roles, "admin" ]
    - [ roles, "phantom" ]
    - [ roles, "phantomdelete" ]
    - [ roles, "phantomsearch" ]
    validate_certs: false
    status_code: 200
    timeout: 10
  ignore_errors: true


# This has proven tricky, will debug some other time. For now quick and dirty
#Construct the required token input for splunk
# Format: [{'ph-auth-token':'TOKEN','server':'https://PHANTOMHOST'}]"



- name: Disable phantom certificate validation
  uri:
    url: "https://127.0.0.1:{{ splunk.svc_port }}/servicesNS/nobody/phantom/configs/conf-phantom/verify_certs"
    method: POST
    user: admin
    password: "{{ splunk.password }}"
    body_format: form-urlencoded
    body:
    - [ value, 0 ]
    validate_certs: false
    status_code: 200
    timeout: 10
  ignore_errors: true
  tags: phantom-app-config



- name: Create phantom config cmd via curl with template
  vars:
    splunk_phantom_token_for_rest: "{{ phantom_auth_token.json.key }}"
  template:
    src: add_phantom_instance.j2
    dest: "~/config_phantom.sh"
  tags: phantom-app-config  

- name: Execute phantom config via generated curl command
  command: /usr/bin/sh ~/config_phantom.sh
  tags: phantom-app-config

#- name: Create phantom config file
# copy phantom.conf to /splunk/etc/apps/phantom/local
# cat phantom.conf
# [phantom]
# value = {}

# [version]
# value = "2.5.23"

# [verify_certs]
# value = true

# [enable_logging]
# value = true

# [accepted]
# value = true