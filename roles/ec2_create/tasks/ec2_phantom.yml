---

- name: Create security group for Phantom
  ec2_group:
    name: "{{ phantom_aws.security_group_name }}"
    description: "{{ phantom_aws.security_group_desc }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
        rule_desc: allow all on port 22    
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
        rule_desc: allow all on port 443
    state: present
  register: security_group

- name: Create Phantom EC2 instance (Default)
  ec2:
    instance_tags:
        Name: "{{ phantom_aws.instance_name_tag }}"
    count_tag: 
        Name: "{{ phantom_aws.instance_name_tag }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ phantom_aws.disk_size }}"     
        delete_on_termination: true   
    exact_count: "{{ phantom_aws.count_instances }}"
    group: "{{ phantom_aws.security_group_name }}"
    instance_type: "{{ phantom_aws.instance_type }}"
    key_name: "{{ keypair }}"
    region: "{{ region }}"
    image: "{{ phantom_aws.image_ami_id }}"
    wait: yes
  register: ec2
  


# - name: DEBUG
#   debug: var=item
#   with_items: "{{ ec2.tagged_instances }}"

# - name: Gather facts about the launched instances
#   ec2_instance_facts:
#     aws_access_key: "{{ aws_access_key }}"
#     aws_secret_key: "{{ aws_secret_key }}"
#     filters:
#       "tag:Name": SplunkServerBOTO

#   register: ec2_info

- name: Add the newly created Phantom EC2 instance(s) to hosts group
  ini_file:
    path: "{{ hostpath }}"
    section: "{{ phantom_aws.hosts_group }}"
    option: "{{ item.public_ip }} {{ phantom_aws.hoststring }}"
    allow_no_value: true
  with_items: "{{ ec2.tagged_instances }}"


# - name: Wait for SSH to come up
#   local_action: wait_for 
#                 host={{ item.public_ip }} 
#                 port=22 
#                 state=started
#   with_items: "{{ ec2.tagged_instances }}"



